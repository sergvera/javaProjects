


objectController(controllerPackage,daoPackage,modelPackage,objectName,instanceName,webPath,objectPkFields)   ::= <<

/*
 *
 */
package <controllerPackage>;

import com.hcolonial.controller.BaseController;
import com.hcolonial.controller.GenericJSONResponse;
import <daoPackage>.<objectName>DaoInterface;
import <modelPackage>.<objectName>;
import javax.validation.Valid;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.support.SessionStatus;

@Controller
@RequestMapping("<webPath>")
public class <objectName>Controller extends BaseController {

    @Autowired
    private <objectName>DaoInterface dao = null;

    @RequestMapping(method = RequestMethod.GET)
    public String initForm(ModelMap model) {
        <objectName> <instanceName> = new <objectName>();
        // command object
        model.addAttribute("<instanceName>", <instanceName>);
        // return form view
        return "/sistema/<instanceName>";
    }

    @RequestMapping(value = "/update.json", method = RequestMethod.POST)
    public @ResponseBody
    GenericJSONResponse update(@ModelAttribute("<instanceName>") @Valid <objectName> <instanceName>,
            BindingResult bindingResult, SessionStatus status) {

        GenericJSONResponse result = new GenericJSONResponse();
        try {
            result.setResult(<instanceName>);

            if (!hasErrors(bindingResult, result)) {
                
                dao.saveOrUpdate(<instanceName>, result.getActionLog());
                result.setStatus(GenericJSONResponse.STATUS.SUCCESS.toString());
            }
        } catch (Exception e) {
            log.error(e.getMessage(), e);
            addErrorMessage("generalError", e.getMessage(), result);
            result.setStatus(GenericJSONResponse.STATUS.FAIL.toString());
        }

        return result;
    }

    @RequestMapping(value = "/saveNew.json", method = RequestMethod.POST)
    public @ResponseBody
    GenericJSONResponse saveNew(@ModelAttribute("<instanceName>") @Valid <objectName> <instanceName>,
            BindingResult bindingResult, SessionStatus status) {

        GenericJSONResponse result = new GenericJSONResponse();
        try {
            result.setResult(<instanceName>);

            if (!hasErrors(bindingResult, result)) {
                
                if (!dao.exists(<instanceName>, result.getActionLog())) {
                    dao.saveOrUpdate(<instanceName>, result.getActionLog());
                    result.setStatus(GenericJSONResponse.STATUS.SUCCESS.toString());
                } else {

                    addErrorMessage("<instanceName>", "<objectName> " + <objectPkFields> + " ya existe", result);
                }
            }
        } catch (Exception e) {
            log.error(e.getMessage(), e);
            addErrorMessage("generalError", e.getMessage(), result);
            result.setStatus(GenericJSONResponse.STATUS.FAIL.toString());
        }
        return result;
    }

    @RequestMapping(value = "/buscar.json", method = RequestMethod.POST)
    public @ResponseBody
    GenericJSONResponse buscar(@ModelAttribute("<instanceName>") <objectName> <instanceName>,
            BindingResult bindingResult, SessionStatus status) {

        GenericJSONResponse result = new GenericJSONResponse();

        try {
            if (!StringUtils.isBlank(<objectPkFields>)) {
                
                if (dao.exists(<instanceName>, result.getActionLog())) {
                    result.setResult(dao.retrieve(<instanceName>, result.getActionLog()));
                    result.setStatus(GenericJSONResponse.STATUS.SUCCESS.toString());
                } else {
                    result.setResult(<instanceName>);
                    addErrorMessage("<instanceName>", "<objectName> no encontrada", result);

                }
            } else {
                addErrorMessage("<instanceName>", "Especifique una <instanceName> a buscar", result);

            }
        } catch (Exception e) {
            log.error(e.getMessage(), e);
            addErrorMessage("generalError", e.getMessage(), result);
            result.setStatus(GenericJSONResponse.STATUS.FAIL.toString());
        }

        return result;
    }

    @RequestMapping(value = "/lista.json", method = RequestMethod.POST)
    public @ResponseBody
    GenericJSONResponse buscar() {

        GenericJSONResponse result = new GenericJSONResponse();

        try {
            result.setResult(dao.selectAll(result.getActionLog()));
            result.setStatus(GenericJSONResponse.STATUS.SUCCESS.toString());

        } catch (Exception e) {
            log.error(e.getMessage(), e);
            addErrorMessage("generalError", e.getMessage(), result);
            result.setStatus(GenericJSONResponse.STATUS.FAIL.toString());
        }

        return result;
    }

    @RequestMapping(value = "/borrar.json", method = RequestMethod.POST)
    public @ResponseBody
    GenericJSONResponse borrar(@ModelAttribute("<instanceName>") @Valid <objectName> <instanceName>,
            BindingResult bindingResult, SessionStatus status) {

        GenericJSONResponse result = new GenericJSONResponse();
        try {
            if (!hasErrors(bindingResult, result)) {
               
                if (dao.exists(<instanceName>, result.getActionLog())) {
                    result.setResult(new <objectName>());
                    dao.delete(<instanceName>, result.getActionLog());
                    result.setStatus(GenericJSONResponse.STATUS.SUCCESS.toString());
                } else {
                    result.setResult(<instanceName>);

                    addErrorMessage("<instanceName>", "<objectName> no encontrada", result);

                }
            }
        } catch (DataIntegrityViolationException dive) {
            log.error(dive.getMessage(), dive);
            addErrorMessage("generalError", "No se puede borrar el registro, esta siendo referenciado por otros registros en la base de datos.", result);
            result.setStatus(GenericJSONResponse.STATUS.FAIL.toString());
        } catch (Exception e) {
            log.error(e.getMessage(), e);
            addErrorMessage("generalError", e.getMessage(), result);
            result.setStatus(GenericJSONResponse.STATUS.FAIL.toString());
        }

        return result;
    }

 

    public <objectName>DaoInterface getDao() {
        return dao;
    }

    public void setDao(<objectName>DaoInterface dao) {
        this.dao = dao;
    }
}


>>